import yaml# from ruamel import yaml# import sysfrom config.config import Confimport timefrom common.api import ApiCallclass GetYaml:    def __init__(self, case_name, other_data=None, headers=None):        self.case_name = case_name        self.other_data = other_data        self.headers = str(headers)        f = open(r'../params/Yaml/{}.yml'.format(self.case_name), encoding="utf-8")        self.cases = yaml.safe_load(f)    def case_select(self, case_name):        # 对用例列表进行遍历，找出对应的用例        for case in self.cases:            if case['name'] == case_name:                # 判断老接口用例                if str(case_name)[0:3] == 'old':                    if self.other_data is not None:                        for i in self.other_data:                            case['data']['param'][i] = self.other_data[i]                    return self._response_old(case)                # 新接口用例调用方法                else:                    # 对用例中需要参数化的参数进行参数化                    if self.other_data is not None:                        for i in self.other_data:                            case['data'][i] = self.other_data[i]                    return self._response_new(case)    def _response_old(self, case):        # 对老接口用例进行格式化处理        param = JsonTemplate(case['name'], case['data']['param'], self.headers).old_template()        # 调用接口，取到接口的返回值        result = ApiCall(param).api_call(self.headers, case['api'], case['method'])        # 判断用例中是否包含数据库信息（作为断言判断条件）        if 'DB_table' in case:            db_table = case['DB_table']        else:            db_table = None        # 返回断言需要用到的信息        response = {            'result': result,            'assert_type': case['assert_type'],            'check': case['check'],            'detail': case['detail'],            'DB_table': db_table        }        return response    def _response_new(self, case):        # 对新接口用例进行格式化处理        param = JsonTemplate(case['name'], case['data'], self.headers).template()        # 调用接口，取到接口的返回值        result = ApiCall(param).api_call(self.headers, case['api'], case['method'])        # 判断用例中是否包含数据库信息（作为断言判断条件）        if 'DB_table' in case:            db_table = case['DB_table']        else:            db_table = None        # 返回断言需要用到的信息        response = {            'result': result,            'assert_type': case['assert_type'],            'check': case['check'],            'detail': case['detail'],            'DB_table': db_table        }        return responseclass JsonTemplate:    def __init__(self, name, data, token):        self.name = name        self.data = data        self.token = token        self.url, self.app_key, self.secret = Conf().api_conf()    # 新街口（/API）入参格式化处理    def template(self):        param = {            "access_token": self.token,            "name": self.name,            "version": "",            "app_key": self.app_key,            "data": self.data,            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()),            "format": "json"        }        return param    # 老接口（.json）入参格式化处理    def old_template(self):        param = {            'token': self.token,            'param': self.data        }        return param